Perguntas teóricas de introdução

1 - Em quais linguagens o C# foi inspirado?
R: Mesmo sendo desenvolvido do zero, o C# foi baseado em C++, Object Pascal e Java.


2 - Inicialmente o C# foi criado para qual finalidade?
R: Sua finalidade era desprender a plataforma .NET de outras linguagens pois a dependencia da plataforma com todo o código já implementado
dessas linguagens acabava por limitar o desenvolvimento da plataforma.


3 - Quais os principais motivos para a Microsoft ter migrado para o Core?
R: 
-Fazer com que o .net passasse a ser multiplataforma, podendo ser executado em ambientes como MacOS ou Linux diferente do .net full framework que só pode rodar em windows.


4 - Cite as principais diferenças entre .Net Full Framework e .Net Core.
R: 
-O .Net core possui Runtime otimizado, 
-O .Net core é complementamente independente do framework .net que é instalado na máquina cliente (sempre que fazemos deploy estamos deployando o runtime e as bibliotecas),  
-O .Net Core é multiplataforma podendo ser executadas em MAC OS e Linux.
-O .net core é modular, por ser distribuido atravez do nuget, posso usar na minha máquina só o que quiser do framework alem de ser open source.


Perguntas POO (Implementação dos exemplos podem ser conferidos no arquivo ~/POO/POO1)

1- O que é POO?
R: Programação Orientada a Objetos (POO) é um paradigma de programação no qual tenta aproximar a codificação das estruturas de um programa a objetos do mundo real, 
é por esse motivo que se chama orientada a "objetos" que é algo completamente genérico e que pode representar qualquer coisa tangivel do mundo.

2 - O que é polimorfismo?
R: Polimorfismo é o conceito que define que o mesmo método pode ser implementado de diferentes formas em objetos de diferentes classes;

3- O que é abstração?
R: A abstração é um dos conceitos mais importantes de uma linguagem orientada a objetos, ela é a capacidade de extrair aspectos e comportamentos de personagens ou itens  que 
sejam importantes em um contexto e representalos por meio de classes. 

4- O que é encapsulamento?
R: O encapsulamento é uma técnica que adiciona segurança quando implementamos em uma linguagem orientada a objetos, ela define que os detalhes internos de uma classe não devem ser visiveis e modificaveis 
externamente, isso é muito útil para diminuir a dependencia entre pedaços de um sistema.
Um exemplo classico e sempre utilizado é a da televisão, quando você liga a tv, troca o canal ou muda o volume, ao apertar os botões você sabe o comportamento esperado nas não sabe exatamente como eles 
são executados.

5 - Quando usar uma classe abstrata e quando devo usar uma interface?
R: A classe abstrata é uma classe não instanciavel (pelo menos não diretamente) ela pode conter um conjunto de propriedades e comportamentos completos ou não que sejam comuns a uma série de outras 
classes que poderão ser acessadas por meio de herança. 
As interfaces diferentes das classes abstratas não podem conter implementação nenhuma, elas possuem somente uma definição das propriedades e métodos esperados em uma classe. 
Por esse motivo funcionam  como "contratos" pois uma vez que uma classe implemente uma interface ela deverá obrigatóriamente possuir as propriedades e métodos descritos por ela. 
As interfaces podem ser muito poderosas se bem utilizadas, elas permitem o reaproveitamento de comportamentos, baixar o nível de acomplamento entre as partes de um sistema e criar
designs flexiveis e com grande capacidade de evolução.

6 - O que faz as interfaces IDisposable, IComparable, ICloneable e IEnumerable?
IDisposable: Define que uma classe implemente o método Dispose(). Esse método é usado para liberar recursos não gerenciados, como por exemplo conexões com o banco de dados, arquivos, etc... 
IComparable: Define que uma classe implemente o método CompareTo(). Esse método ao receber um outro objeto permite definir se o objeto atual em uma relação de precedencia antecede, sucede ou tem mesmo valor ao objeto recebido.
ICloneable:  Define quem uma classe implemente o método Clone(). Esse método permite replicar um objeto com os mesmos valores de uma instância existente.
IEnumerable: Define que uma classe implemente o método GetEnumerator() que retorna um enumerador, esse enumerador permite a iteração simples em uma lista não generica de elementos, resumindo 
ele permite deixar algo "iteravel".

7 - Existe herança múltipla (de classes) em C#?
R: Não é possivel que uma classe herde de mais de uma classe no C#, o que podemos fazer é utilizar as interfaces para resolver situações onde necessitariamos de multiplas definições para um mesmo objeto.


QUESTÕES SOBRE TESTES

1- Quais os principais frameworks que podemos usar no desenvolvimento de testes?
-MSTest,
-xUnit
-NUnit,

2- Escolha dois frameworks e faça testes unitários para pelo menos dois exercícios em cada framework.
Os testes estão disponíveis nos projetos
-TestesXUnit
-TestesMsTest
